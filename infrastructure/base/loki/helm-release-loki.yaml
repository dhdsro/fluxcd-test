apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: loki
spec:
  interval: 5m
  releaseName: loki
  chart:
    spec:
      chart: charts/loki/loki-6.29.0.tgz
      sourceRef:
        kind: GitRepository
        name: flux-system
        namespace: flux-system
  values:
    loki:
      commonConfig:
        replication_factor: 1
      ingester:
        chunk_encoding: snappy
      tracing:
        enabled: true
      querier:
        # Default is 4, if you have enough memory and CPU you can increase, reduce if OOMing
        max_concurrent: 2

    # Add Promtail configuration for better log level detection
    promtail:
      enabled: true
      config:
        clients:
          - url: http://loki:3100/loki/api/v1/push
        scrape_configs:
          - job_name: kubernetes-pods
            kubernetes_sd_configs:
              - role: pod
            relabel_configs:
              - source_labels: [ __meta_kubernetes_pod_controller_name ]
                regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
                target_label: __tmp_controller_name
              - source_labels: [ __meta_kubernetes_pod_label_app_kubernetes_io_name ]
                target_label: service_name
            pipeline_stages:
              # Parse JSON logs
              - json:
                  expressions:
                    level: level
                    message: message
                    timestamp: timestamp
              # Map log levels more precisely
              - template:
                  source: level
                  template: '{{ .level | lower }}'
              # Set detected_level based on actual log level
              - labels:
                  level:
              - match:
                  selector: '{level="debug"}'
                  stages:
                    - static_labels:
                        detected_level: "debug"
              - match:
                  selector: '{level="info"}'
                  stages:
                    - static_labels:
                        detected_level: "info"
              - match:
                  selector: '{level="warn"}'
                  stages:
                    - static_labels:
                        detected_level: "warning"
              - match:
                  selector: '{level="error"}'
                  stages:
                    - static_labels:
                        detected_level: "error"
              - match:
                  selector: '{level="fatal"}'
                  stages:
                    - static_labels:
                        detected_level: "error"
              # Default case - if no level detected, check message content
              - match:
                  selector: '{detected_level=""}'
                  stages:
                    - regex:
                        expression: '(?i)(error|fail|exception|panic|fatal)'
                        source: message
                    - static_labels:
                        detected_level: "error"
              # If still no level, mark as info
              - match:
                  selector: '{detected_level=""}'
                  stages:
                    - static_labels:
                        detected_level: "info"

    deploymentMode: SingleBinary
    singleBinary:
      replicas: 1
      resources:
        limits:
          cpu: 1
          memory: 1Gi
        requests:
          cpu: 500m
          memory: 500Mi
      extraArgs:
        - '-config.expand-env=true'
      extraEnv:
        # Keep a little bit lower than memory limits
        - name: GOMEMLIMIT
          value: 900MiB
    chunksCache:
      # default is 500MB, with limited memory keep this smaller
      writebackSizeLimit: 10MB
      allocatedMemory: 1024
      resources:
        requests:
          cpu: 250m
    resultsCache:
      # default is 500MB, with limited memory keep this smaller
      writebackSizeLimit: 10MB
      allocatedMemory: 512
      resources:
        requests:
          cpu: 250m

    # Enable minio for storage
    minio:
      enabled: false

    # Zero out replica counts of other deployment modes
    backend:
      replicas: 0
    read:
      replicas: 0
    write:
      replicas: 0

    ingester:
      replicas: 0
    querier:
      replicas: 0
    queryFrontend:
      replicas: 0
    queryScheduler:
      replicas: 0
    distributor:
      replicas: 0
    compactor:
      replicas: 0
    indexGateway:
      replicas: 0
    bloomCompactor:
      replicas: 0
    bloomGateway:
      replicas: 0
