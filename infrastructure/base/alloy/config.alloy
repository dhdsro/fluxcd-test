discovery.kubernetes "pods" {
  role = "pod"
  namespaces {
    names = ["default", "podinfo", "grafana", "alloy", "mimir"]
  }
}

prometheus.scrape "kubernetes_pods" {
  targets    = discovery.kubernetes.pods.targets
  forward_to = [prometheus.remote_write.default.receiver]
  scrape_interval = "30s"
}

discovery.kubernetes "services" {
  role = "service"
  namespaces {
    names = ["default", "podinfo", "grafana", "alloy", "mimir"]
  }
}

prometheus.scrape "kubernetes_services" {
  targets    = discovery.kubernetes.services.targets
  forward_to = [prometheus.remote_write.default.receiver]
  scrape_interval = "30s"
}

prometheus.remote_write "default" {
  endpoint {
    url = "http://mimir-distributor.mimir.svc.cluster.local:8080/api/v1/push"
  }

  external_labels = {
    alloy_instance = env("HOSTNAME"),
  }
}

// Local file discovery for /var/log
local.file_match "var_log" {
  path_targets = [{
    __path__ = "/var/log/*",
  }]
}

// Scrape logs from /var/log directory
loki.source.file "var_log" {
  targets    = local.file_match.var_log.targets
  forward_to = [loki.process.var_log.receiver]

  // Optional: Add file watching and position tracking
  tail_from_end = false
}

// Process logs and add labels
loki.process "var_log" {
  forward_to = [loki.write.default.receiver]

  stage.static_labels {
    values = {
      job = "var-log",
      instance = env("HOSTNAME"),
    }
  }

  // Extract filename as a label
  stage.regex {
    expression = "^/var/log/(?P<filename>[^/]+)$"
    source     = "__path__"
  }

  stage.labels {
    values = {
      filename = "",
    }
  }
}

// Kubernetes pod log discovery
discovery.kubernetes "pod_logs" {
  role = "pod"
  namespaces {
    names = ["default", "podinfo", "grafana", "alloy", "mimir", "loki", "minio"]
  }
}

// Collect pod logs
loki.source.kubernetes "pod_logs" {
  targets    = discovery.kubernetes.pod_logs.targets
  forward_to = [loki.process.pod_logs.receiver]
}

// Process pod logs and add labels
loki.process "pod_logs" {
  forward_to = [loki.write.default.receiver]

  stage.static_labels {
    values = {
      job = "kubernetes-pods",
    }
  }

  // Extract standard Kubernetes labels
  stage.labels {
    values = {
      namespace   = "__meta_kubernetes_namespace",
      pod         = "__meta_kubernetes_pod_name",
      container   = "__meta_kubernetes_pod_container_name",
      node        = "__meta_kubernetes_pod_node_name",
    }
  }

  // Optional: Parse JSON logs if your apps output JSON
  stage.json {
    expressions = {
      level = "level",
      msg   = "message",
    }
  }

  // Optional: Add timestamp parsing if needed
  stage.timestamp {
    source = "timestamp"
    format = "RFC3339"
  }
}

// Write logs to Loki
loki.write "default" {
  endpoint {
    url = "http://loki-gateway.loki.svc.cluster.local/loki/api/v1/push"
  }

  external_labels = {
    alloy_instance = env("HOSTNAME"),
  }
}
